#!/bin/bash
#
# Use pip in batch mode


error(){
    echo "ERROR: $@" >&2
}


packages(){
    if [[ $2 = local ]]; then
        pycode="if '/.local/' in pkg.location"
    elif [[ $2 = system ]]; then
        pycode="if '/.local/' not in pkg.location"
    fi

    "python${1}" <<-EOF 2>/dev/null
	import pip
	pkgs = [pkg.project_name for pkg in pip.get_installed_distributions() ${pycode}]
	pkgs.sort()
	print('\n'.join(pkgs))
	EOF
}


# packages(){
#     # NOTE: this is slower than the pure python implementation
#     (
#         if [[ $2 = local ]]; then
#             "pip${1}" list --user
#         elif [[ $2 = system ]]; then
#             awk 'NR==FNR{old[$0];next}!($0 in old)' <("pip${1}" list --user) <("pip${1}" list)
#         else
#             "pip${1}" list
#         fi
#     ) 2>/dev/null | awk '{print $1}'
# }


search(){
    # NOTE: double whitespace in awk regex corrects for erroneous pip results
    #       see `pip3 search CherryPy | cat -E` (line breaks where they shouldn't be)

    while IFS= read -r package; do
        "pip${1}" search "$package" 2>/dev/null | awk -S -v package="$package" '$0 ~ "^"package"\\s\\s" {do {print; if (getline != 1) break} while ($0 ~ "^  "); printf "\n"}'
    done < <(packages "$1" "$2")
}


# search(){
#     while IFS= read -r package; do
#         (
#             results=$("pip${1}" search "$package" 2>/dev/null)
#             awk -S -v package="$package" '$0 ~ "^"package"\\s\\s" {do {print; if (getline != 1) break} while ($0 ~ "^  ")}' <<<"$results"
#         )
#     done < <(packages "$1" "$2")
# }


show(){
    if [[ $2 = local ]]; then
        pycode="if '/.local/' in pkg.location"
    elif [[ $2 = system ]]; then
        pycode="if '/.local/' not in pkg.location"
    fi

    "python${1}" <<-EOF 2>/dev/null
	import pip
	pkgs = [pkg.project_name for pkg in pip.get_installed_distributions() ${pycode}]
	pkgs.sort()
	[pip.main(['show', pkg]) for pkg in pkgs]
	EOF
}


updates(){
    (
        if [[ $2 = local ]]; then
            "pip${1}" list --outdated --pre --user
        elif [[ $2 = system ]]; then
            ("pip${1}" list --outdated --pre; "pip${1}" list --outdated --pre --user) | sort | uniq -u
        else
            "pip${1}" list --outdated --pre
        fi
    ) 2>/dev/null | LC_ALL=C sort
}


# updates(){
#     # NOTE: double whitespace in awk regex corrects for erroneous pip results
#     #       see `pip3 search CherryPy | cat -E` (line breaks where they shouldn't be)

#     while IFS= read -r package; do
#         "pip${1}" search "$package" | awk -S -v package="$package" '$0 ~ "^"package"\\s\\s" {getline; while ($0 ~ "^  ") {if ($0 ~ "^  LATEST:") {print package; break}; if (getline != 1) break}}'
#     done < <(packages "$1" "$2")
# }


# updates(){
#     while IFS= read -r package; do
#         (
#             results=$("pip${1}" search "$package" 2>/dev/null)
#             awk -S -v package="$package" '$0 ~ "^"package"\\s\\s" {getline; while ($0 ~ "^  ") {if ($0 ~ "^  LATEST:") {print package; exit}; if (getline != 1) break}}' <<<"$results"
#         )
#     done < <(packages "$1" "$2")
# }


if (( $# == 0 )) || [[ $1 =~ ^(-h|--help|help)$ ]]; then
    echo "Usage: ${0##*/} (2|3) (packages|search|show|updates) (all|local|system)"
    exit 0
elif [[ ! $1 =~ ^2|3$ ]]; then
    error 'Please indicate 2 or 3 (for pip2 or pip3 respectively)'
    exit 1
elif [[ ! $2 =~ ^(packages|search|show|updates)$ ]]; then
    error 'Invalid command'
    exit 1
elif [[ -n $3 && ! $3 =~ ^(all|local|system)$ ]]; then
    error 'Please indicate local or system packages'
    exit 1
elif (( $# > 3 )); then
    error 'Too many arguments'
    exit 1
fi


"$2" "$1" "$3"
